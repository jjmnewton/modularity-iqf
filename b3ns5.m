/* Determining quadratic points on X(b3,ns5) */
/* A. Caraiani and J. Newton */

P<x,y>:=PolynomialRing(Rationals(),2);
AP:=AffineSpace(P);
/* j-invariant on X0(3) is (x+27)*(x+3)^3/x */
/* j-invariant on X(ns5) is 5^3*y*(2*y+1)^3*(2*y^2+7*y+8)^3/(y^2+y-1)^5 */
j3:=(x+27)*(x+3)^3/x;
j5:=5^3*y*(2*y+1)^3*(2*y^2+7*y+8)^3/(y^2+y-1)^5;
fxy := (x+27)*(x+3)^3*(y^2+y-1)^5 - x*5^3*y*(2*y+1)^3*(2*y^2+7*y+8)^3;
Csing := Curve(AP,fxy);
assert(Genus(Csing) eq 2);

b,Creg,MapCsingtoCreg := IsHyperelliptic(Csing);
assert(b); /* Check curve is hyperelliptic */


AttachSpec("./hyperelliptic-main/magma/spec");

/* check that the automorphism group of Creg is generated by the hyperelliptic involution */
assert(#AutomorphismsOfHyperellipticCurve(Creg) eq 2);

C,map2 := SimplifiedModel(Creg);

/*The next command shows the Jacobian has rank 0 by computing the 2-Selmer group and comparing with the 2-torsion subgroup, and gives he full Mordell-Weil group*/
MW,MWmap := MordellWeilGroupGenus2(Jacobian(C));
MW;

/* Check points mod 7 */
F7:=FiniteField(7); C7 := ChangeRing(C,F7); J7 := Jacobian(C7); 
/* F_7 points of Jacobian are isomorphic to C_2 x C_20 */
AbelianGroup(J7);


D1 := MWmap(MW.1); D2 := MWmap(MW.2);
IQFdivs:=[];
for i:=1 to 10 do
for j:=0 to 1 do
D := i*D2 + j*D1;
for factor in Factorisation(D[1]) do
if Degree(factor[1]) gt 0 then
if Discriminant(NumberField(factor[1])) lt 0 then
D; i; j; Append(~IQFdivs,D);
/*Divisor D has support defined over imaginary quadratic field. D = iMW.2 + jMW.1 */
end if;
end if;
end for;
end for;
end for;

/* Check formula for points in support*/
PP<X,Y,Z> := CoordinateRing(Ambient(C));
D1 := Divisor(C, ideal<PP|(6*X+5*Z)^2+11*Z^2,Y-(X-2*Z)*Z^2>);
D2 := Divisor(C, ideal<PP|(6*X+5*Z)^2+11*Z^2,Y+(X-2*Z)*Z^2>);
J1 := JacobianPoint(Jacobian(C),D1);
J2 := JacobianPoint(Jacobian(C),D2);
assert(IQFdivs eq [J1,J2] or IQFdivs eq [J2,J1]);

/* Find elliptic curve associated to Q(sqrt(-11)) points */
R<x> := PolynomialRing(Rationals()); K<a> := NumberField(R![3, -1, 1]);
E := EllipticCurve([K![0,1],K![0,0],K![1,1],K![-24,-6],K![56,13]]);
j := jInvariant(E);
j;
/* j-invariant is 1/32*(11155375*a + 3126750),  a is root of x^2-x+3*/
RK<X> := PolynomialRing(K);
CsingK := BaseExtend(Csing,K);
Ptest:= CsingK![32*a - 96, 1/9*(-a - 15)];
Ptestconj:= CsingK![32*(1-a) - 96, 1/9*(a-1 - 15)];
/* check this point has right j-invariant*/
assert(j eq Evaluate(j3,[32*a - 96,0])); assert(j eq Evaluate(j5,[0,1/9*(-a - 15)]));

/* Now we map this point to our nice model C */
CregK := BaseExtend(Creg,K);
mapK := map <CsingK -> CregK | DefiningEquations(MapCsingtoCreg)>;
CK:=BaseExtend(C,K);
map2K := map <CregK -> CK | DefiningEquations(map2)>;
BigMapK := mapK*map2K;
Prealtest := BigMapK(Ptest);
Prealtestconj := BigMapK(Ptestconj);
Dtest := Divisor(Prealtest)+Divisor(Prealtestconj);
assert(Dtest eq DivisorGroup(CK)!D1 or Dtest eq DivisorGroup(CK)!D2);
/* Prealtest is one of the exceptional points in C. Comes from 8100.3-a2 https://www.lmfdb.org/EllipticCurve/2.0.11.1/8100.3/a/2 */

